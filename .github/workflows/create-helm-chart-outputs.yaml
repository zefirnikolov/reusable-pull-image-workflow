name: Docker Image Workflow

# Instead of creating helm charts, this can easily deploy helm charts to different k8s cluster,
# based on the dev, test, stage, prod - stages in which the product is.
# Or used for other purposes

on:
  workflow_call:
    inputs:
      docker-image:
        description: 'The Docker image to be tagged.'
        required: true
        type: string
      # To get the output from the other reusable workflow - you need to want it from it with input.
      docker-tag:
        description: "The docker tag from the version calculator"
        required: false
        type: string

jobs:
  create_helm_chart:
    runs-on: ubuntu-latest
    steps:           
      - name: Create Helm chart
        run: |
          TAGGED_IMAGE=${{ inputs.docker-tag }}
          PREFIX=$(echo $TAGGED_IMAGE | cut -c1-4)

          if [ "$PREFIX" == "deve" ]; then
            echo "Creating development Helm chart..."
            helm create chart-dev-${{ inputs.docker-tag }} && cd chart-dev-${{ inputs.docker-tag }} && ls
          elif [ "$PREFIX" == "test" ]; then
            echo "Creating test Helm chart..."
            helm create chart-test-${{ inputs.docker-tag }} && cd chart-test-${{ inputs.docker-tag }} && ls
          elif [ "$PREFIX" == "stag" ]; then
            echo "Creating staging Helm chart..."
            helm create chart-stage-${{ inputs.docker-tag }} && cd chart-stage-${{ inputs.docker-tag }} && ls
          elif [ "$PREFIX" == "prod" ]; then
            echo "Creating production Helm chart..."
            helm create chart-prod-${{ inputs.docker-tag }} && cd chart-prod-${{ inputs.docker-tag }} && ls
          else
            echo "Invalid prefix. Exiting with error."
            exit 1
          fi
      - name: pull and tag the docker image   # pulling the image is not related to creating the tag (it's just a demo pull).
      # But Instead of pulling - you can building and pushing docker images with the calculated tag!
        run: |
          docker pull ${{ inputs.docker-image }}
          docker image tag ${{ inputs.docker-image }} dockerhub-name/newimage-${{ inputs.docker-image }}:${{ inputs.docker-tag }}
          docker image ls
